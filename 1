import os
import logging
from telegram import ReplyKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,
                          ConversationHandler)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

INCOME, EXPENSE = range(2)

def start(update, context):
    reply_keyboard = [['Income', 'Expense']]
    update.message.reply_text(
        "Hi! I'm your budget tracker. Let's start tracking your money. "
        "What would you like to add today: Income or Expense?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return INCOME

def income(update, context):
    update.message.reply_text("How much income would you like to add?")
    return EXPENSE

def expense(update, context):
    update.message.reply_text("How much expense would you like to add?")
    return INCOME

def save_data(update, context):
    text = update.message.text
    amount = int(text)
    user_data = context.user_data
    category = user_data['category']
    if category == 'Income':
        if 'income' in user_data:
            user_data['income'] += amount
        else:
            user_data['income'] = amount
        update.message.reply_text("Income of {} saved. Your current balance is {}".format(amount, user_data['income']))
    else:
        if 'expense' in user_data:
            user_data['expense'] += amount
        else:
            user_data['expense'] = amount
        update.message.reply_text("Expense of {} saved. Your current balance is {}".format(amount, user_data['expense']))
    return INCOME

def cancel(update, context):
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text("Bye! I hope to see you again soon!",
                              reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("6181822648:AAF0ptADhFP6Q4B7Sz25uDaD3cI8cGnWvAo", use_context=True)
# Get the dispatcher to register handlers
dp = updater.dispatcher

# Add conversation handler with the states INCOME, EXPENSE
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        INCOME: [RegexHandler('^(Income)$', income),
                 MessageHandler(Filters.text, save_data)],
        EXPENSE: [RegexHandler('^(Expense)$', expense),
                  MessageHandler(Filters.text, save_data)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)

dp.add_handler(conv_handler)

# log all errors
dp.add_error_handler(error)

# Start the Bot
updater.start_polling()

# Run the bot until you press Ctrl-C or the process receives SIGINT,
# SIGTERM or SIGABRT. This should be used most of the time, since
# start_polling() is non-blocking and will stop the bot gracefully.
updater.idle()
if name == 'main':
main()
